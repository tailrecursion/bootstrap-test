(page "index.html"
  (:refer-clojure :exclude [int])
  (:require-macros
    [bootstrap.code             :as code])
  (:require
    [clojure.string             :as string]
    [bootstrap.core             :as core]
    [bootstrap.grid             :as grid]
    [bootstrap.meta             :as meta]
    [bootstrap.list             :as list]
    [bootstrap.page             :as page]
    [bootstrap.tabs             :as tabs]
    [bootstrap.glyph            :as glyph]
    [bootstrap.panel            :as panel]
    [bootstrap.button           :as button]
    [bootstrap.navbar           :as navbar]
    [tailrecursion.hoplon.util  :as hutil]))

(def route (hutil/route-cell 10 "#/home/"))

(def cqrs-url           "http://martinfowler.com/bliki/CQRS.html")
(def hoplon-url         "https://github.com/tailrecursion/hoplon")
(def boot-url           "https://github.com/tailrecursion/boot")
(def hoplon-clojars-url "https://clojars.org/tailrecursion/hoplon")
(def hoplon-demos-url   "https://github.com/tailrecursion/hoplon-demos")
(def bootstrap-url      "http://getbootstrap.com/getting-started/")
(def hoplon-group-url   "https://groups.google.com/forum/#!forum/hoplon")
(def hoplon-issues-url  "https://github.com/tailrecursion/hoplon/issues")

(defn hyphenate! []
  (.. (js/jQuery "p") (addClass "hyphenate") (css "text-align" "justify"))
  (.run js/Hyphenator))

(def-values
  [page-setup nav-bar
   content-home
   content-getting-started
   content-community
   content-github]
  (page/navbar-fixed-top
    route
    "Hoplon"
    "Hoplon"
    [(a :href "#/home/"                       "Home") (div)]
    [(a :href "#/getting-started/" "Getting Started") (core/container)]
    [(a :href "#/community/"             "Community") (core/container)]
    [(a :href hoplon-url :target "_blank"   "GitHub") (core/container)]))

(def indexed (partial map-indexed list))

(defc gs-tasks {:cur nil :toc []})
(defc gs-tips  {:cur nil :toc []})

(defelem jump-to-toc [{:keys [tocs]} _]
  (a :class "topfix" :do-scroll-to (cell= (some zero? (map :cur tocs)))))

(defelem table-of-contents [{:keys [size toc]} _]
  (let [toc* (cell= (indexed (:toc toc)))]
    (ul :class "list-unstyled"
      (loop-tpl :size size
                :bindings [[i title] toc*]
        (li (a :style "cursor:pointer;"
               :on-click #(swap! toc assoc :cur (inc @i))
               (text "~{title}")))))))

(defelem gs-block [{:keys [toc type title]} kids]
  (when toc (swap! toc update-in [:toc] conj title))
  (panel/default :class (str "panel-" (name type))
    (when toc
      (a
        :class "topfix"
        :do-scroll-to (cell= (= ~(count (:toc @toc)) (:cur toc)))))
    (panel/heading
      (panel/title title))
    (panel/body
      kids
      (when toc
        (div :style "text-align:center"
          (a :on-click #(do (swap! toc assoc :cur nil)
                            (swap! toc assoc :cur 0))
            "back to top"))))))

(def gs-info (partial gs-block :type :info))
(def gs-task (partial gs-block :toc gs-tasks :type :primary))
(def gs-tip  (partial gs-block :toc gs-tips  :type :warning))

(defc example     1)
(defc bmi-height  180)
(defc bmi-weight  800)

(defc task2syntax 0)

(defelem my-list [attrs children]
  (let [heading (b)
         body    (ul)
         widget  (div :class "my-list" (heading) (body))]
    (on-append! widget
      (fn [{:keys [title] :as attrs} children]
        (when title (do! heading :text title))
        (add-attributes! widget (dissoc attrs :title))
        (apply body (map li children))))
    (apply widget attrs children)))

(defc= bmi
  (let [h (/ bmi-height 100)
        w (/ bmi-weight 10)]
    (/ w (* h h))))

(defc= bmi-msg
  (cond
    (< bmi 18.5) ["underweight" "orange"]
    (< bmi 25.0) ["normal"      "inherit"]
    (< bmi 30.0) ["overweight"  "orange"]
    :else        ["obese"       "red"]))

(def int js/parseInt)
(def calc-op {"+" + "-" - "*" * "/" /})
(defc calc-x 0)
(defc calc-y 0)
(defc calc-z +)

(defn counter-code []
  (code/highlight :clj
    ;;{{
    (page "index.html")

    (defc clicks 0)

    (html
      (head)
      (body
        (text "Clicks so far: ~{clicks} ")
        (button :on-click #(swap! clicks inc) "click me!")))
    ;;}}
    ))

(defn counter-ex []
  (let [clicks (cell 0)]
    (panel/default
      (panel/body
        (text "Clicks so far: ~{clicks} ")
        (button :on-click #(swap! clicks inc) "click me!")))))

(defn calc-code []
  (code/highlight :clj
    ;;{{
    (page "index.html"
      (:refer-clojure :exclude [int]))

    (def int js/parseInt)
    (def ops {"+" + "-" - "*" * "/" /})

    (defc  x      0)
    (defc  y      0)
    (defc  op     +)
    (defc= result (op x y))

    (html
      (head)
      (body
        (input
          :id "x"
          :type "text"
          :value "0"
          :on-change #(reset! x (int (val-id "x"))))
        (select
          :id "op"
          :on-change #(reset! op (ops (val-id "op")))
          (option :value "+" :selected true "+")
          (option :value "-" "-")
          (option :value "*" "*")
          (option :value "/" "/"))
        (input
          :id "y"
          :type "text"
          :value "0"
          :on-change #(reset! y (int (val-id "y"))))
        (text " = ~{result}")))
    ;;}}
    ))

(defn calc-ex []
  (let [x (cell 0)
        y (cell 0)
        op (cell +)
        ops {"+" + "-" - "*" * "/" /}]
    (panel/default
      (panel/body
        (input
          :id "calc-x"
          :type "text"
          :value @x
          :on-change #(reset! x (int (val-id "calc-x"))))
        (select
          :id "calc-op"
          :style "margin-left:15px;margin-right:15px;"
          :on-change #(reset! op (ops (val-id "calc-op")))
          (option :value "+" :selected true "+")
          (option :value "-" "-")
          (option :value "*" "*")
          (option :value "/" "/"))
        (input
          :id "calc-y"
          :type "text"
          :value @y
          :on-change #(reset! y (int (val-id "calc-y"))))
        (text " = ~(op x y)")))))

(defn loop-code1 []
  (code/highlight :clj
    ;;{{
    (page "index.html")

    (defc things ["one" "two" "three"])

    (html
      (head)
      (body
        (ul
          (loop-tpl :bindings [x things]
            (li @x)))))
    ;;}}
    ))

(defn loop-ex1 []
  (let [xs (cell ["one" "two" "three"])]
    (panel/default
      (panel/body
        (ul
          (loop-tpl :size 3 :bindings [x xs]
            (li @x)))))))

(defn loop-code2 []
  (code/highlight :clj
    ;;{{
    (page "index.html"
      (:require
       [clojure.string :refer [upper-case lower-case]]))

    ;; State machine private
    (defc  uc?    false)
    (defc  things [{:text "one"} {:text "two"} {:text "three"}])
    (defc= case   (if uc? upper-case lower-case))

    ;; State machine public API
    (defc= state  (mapv #(update-in % [:text] case) things))
    (defn toggle-case! [_] (swap! uc? not))

    ;; Presentation (uses public API)
    (html
      (head)
      (body
        (ul
          (loop-tpl :bindings [{x :text} state]
            (li (text "~{x}"))))
        (button :on-click toggle-case! "toggle case")))
    ;;}}
    ))

(defn loop-ex2 []
  (let [u? (cell false)
        uc (cell= (if u? string/upper-case string/lower-case))
        xs (cell [{:text "one"} {:text "two"} {:text "three"}])
        st (cell= (mapv #(update-in % [:text] uc) xs))]
    (panel/default
      (panel/body
        (ul
          (loop-tpl :size 3 :bindings [{x :text} st]
            (li (text "~{x}"))))
        (button :on-click #(swap! u? not) "toggle case")))))

(defn tabs-code []
  (code/highlight :clj
    ;;{{
    (ns ui.tabs)

    (defelem active
      [{:keys [state]} [elem]]
      (elem :do-class (cell= {:active state})))

    (defelem trigger
      [{:keys [state tab]} [elem]]
      (active :state (cell= (= state tab))
        (elem :on-click #(reset! state tab))))

    (defelem content
      [{:keys [state tab]} [elem]]
      (active :state (cell= (= state tab)) elem))

    (defelem tabs
      [{:keys [state] :as attr :or {state (cell 0)}} kids]
      (let [ctnr (div (dissoc attr :state))
            [trigs conts] (->> kids (partition 2) (apply map list))
            a-void #(a :href "javascript:void(0)" %)
            mktrig #(trigger :state state :tab %1 (li (a-void %2)))
            mkcont #(content :state state :tab %1 (%2 :class "tab-pane"))]
        (div (dissoc attr :state)
          (ul :class "nav nav-tabs" (map-indexed mktrig trigs))
          (div :class "tab-content" (map-indexed mkcont conts)))))
    ;;}}
    ))

(defn tabs-code2 []
  (code/highlight :clj
    ;;{{
    (page "index.html"
      (:require [ui.tabs :as tabs]))

    (html
      (head
        (link :rel "stylesheet" :href "css/bootstrap.css"))
      (body
        (tabs/tabs
          (span "Zero")
          (div
            (h4 "Foo")
            (p "Content for tab 0."))
          (span "One")
          (div
            (h4 "Bar")
            (p "Content for tab 1."))
          (span "Two")
          (div
            (h4 "Baz")
            (p "Content for tab 2.")))))
    ;;}}
    ))

(defn tabs-code2h []
  (code/highlight :xml
    ;;{{
    <script type="text/hoplon">
      (page "index.html"
        (:require [ui.tabs :as tabs]))
    </script>

    <html>
      <head>
        <link rel="stylesheet" href="css/bootstrap.css">
      </head>
      <body>
        <tabs.tabs>
          <span>Zero</span>
          <div>
            <h4>Foo</h4>
            <p>Content for tab 0.</p>
          </div>
          <span>One</span>
          <div>
            <h4>Bar</h4>
            <p>Content for tab 1.</p>
          </div>
          <span>Two</span>
          <div>
            <h4>Baz</h4>
            <p>Content for tab 2.</p>
          </div>
        </tabs.tabs>
      </body>
    </html>
    ;;}}
    ))

(defn tabs-ex []
  (panel/default
    (panel/body
      (tabs/tabs
        (span "Zero")
        (div
          (h4 "Foo")
          (p "Content for tab 0."))
        (span "One")
        (div
          (h4 "Bar")
          (p "Content for tab 1."))
        (span "Two")
        (div
          (h4 "Baz")
          (p "Content for tab 2."))))))

(def video-dims         {:width 523 :height 392})
(def video-url          "//www.youtube-nocookie.com/embed/XQu8TTBmGhA")
(def video-thumb-url    "http://img.youtube.com/vi/XQu8TTBmGhA/0.jpg")

(defn copyright-footer []
  (footer :style "padding:30px 0px;"
    (div :style "text-align:center;"
      "Copyright © Alan Dipert and Micha Niskin. All rights reserved.")))

(add-initfn!
  (fn []
    (.track js/mixpanel (.. js/window -location -href))
    (hyphenate!)))

(html :lang "en"
  (head
    (meta :charset "utf-8")
    (meta :name "viewport"    :content "width=device-width, initial-scale=1.0")
    (meta :name "keywords"    :content "clojure, clojurescript, cqrs, castra, cljson, spa")
    (meta :name "description" :content "Hoplon provides a number of libraries promoting a simpler model for Clojure/ClojureScript web applications.")
    (link :href "css/bootstrap.min.css"     :rel "stylesheet" :media "screen")
    (link :href "css/starter-template.css"  :rel "stylesheet" :media "screen")
    (title "Hoplon • A simpler way to program the web with Clojure and ClojureScript"))
  (body
    (nav-bar)
    (a :class "topfix" :do-scroll-to (cell= route))
    (noscript
      (div :class "nojs-error"
        "This page uses JavaScript but it looks like you have it turned off."))
    (content-home
      (core/jumbotron
        (core/container :class "lambda"
          (core/container
            (h1 "Hoplon")
            (p "A simpler way to program the web.")
            (p (button/start :href "#/getting-started/" "Get started »")))))
      (core/container
        (grid/row
          (grid/col4
            (h2 "Clojure, everywhere.")
            (p
              "Write everything in Clojure and ClojureScript, clientside and
               serverside. Even the page markup is ClojureScript that is
               evaluated to produce the DOM. Pages can still be written using
               the familiar HTML syntax if desired."))
          (grid/col4
            (h2 "Simplicity on the client.")
            (p
              "Use a spreadsheet-like dataflow programming environment to manage
               client state. Develop basic content-oriented pages and complex
               thick-client applications without descending into “callback
               hell”."))
          (grid/col4
            (h2 "Simplicity on the server.")
            (p
              "Decouple business logic from HTTP-related concerns while
               satisfying complex, fine-grained authorization requirements with
               transparent, performant transfer of Clojure data between server
               and client.")))
        (hr)
        (grid/row
          (grid/col6
            (h2 "Overview " (small "Hoplon in a nutshell."))
            (p
              "Hoplon provides a number of libraries promoting a simpler model
               for web applications. The project can be divided into three main
               components: the HTML evaluator, the clientside state machine, and
               serverside RPC middleware. These components can be used together
               as a full stack, or individually as a part of another stack.")
            (p
              "More concretely, Hoplon ships with a compiler for compiling
               Hoplon pages into HTML and JavaScript (implemented as a build
               task for the "
              (a :href boot-url :target "_blank" "boot")
              " build tool), ClojureScript libraries for creating
               spreadsheet-like dataflow programs and wiring them to the DOM,
               and ClojureScript and Clojure libraries for RPC interaction
               between client and server.")
            (p
              "The source code for Hoplon is hosted on "
              (a :href hoplon-url :target "_blank" "GitHub")
              " and Maven artifacts are deployed to "
              (a :href hoplon-clojars-url :target "_blank" "Clojars")
              ". Contributions of code, feedback, feature requests, etc. are
                welcome. Please read the "
              (a :href "#/community/" "Community")
              " page for more information.")

            (h2 "Web Apps " (small "Single-page applications, not documents."))
            (p
              "Web applications are not documents. Users need to be able to
               interact with them. They contain state. Through them the user
               communicates with backend systems to have some effect on the
               real world.")
            (p
              "Hoplon web apps are organized like applications. The Hoplon
               compiler produces artifacts, not documents. These artifacts are
               equivalent to JAR files in Maven–their coordinates being the
               URL on which they're deployed. The compilation unit is the “page”,
               which is compiled to produce an HTML file–a single-page app.")
            (p
              "Hoplon does not perform any serverside HTML rendering; it is
               completely unnecessary, even for SEO purposes. (Reload this
               page with JavaScript disabled and see how the content was
               “prerendered” at compile time.)")

            (h2 "HTML Evaluator " (small "Page markup is a program."))
            (p
              "Web application user interfaces are specified as trees of
               nested elements in HTML markup, but this document-like
               appearance is misleading. Without JavaScript this markup cannot
               provide the dynamic behavior that web applications require.")
            (p
              "It is at the boundary between the DOM and the JavaScript
               environment that the incidental complexities of web application
               UI development are found. There is a fundamental disconnect
               between the literal representation of the DOM (the HTML markup)
               and the dynamic environment (the JavaScript VM). The page markup
               is evaluated by the browser and the resulting DOM is then
               accessible from JavaScript, but it's a one-way linkage–there is
               no way to refer to objects created dynamically in the JavaScript
               environment from the markup. The browser's HTML evaluation model
               lacks a means of abstraction, preventing the development of new
               elements by composition.")
            (p
              "Hoplon provides an HTML evaluator that closes the loop, unifying
               the page markup and the JavaScript environment. Page markup,
               expressed in either the standard HTML5 syntax or Clojure sexps,
               is evaluated as ClojureScript and the result becomes the DOM for
               the page. HTML tags are simply ClojureScript vars. Of course,
               Hoplon ships with all of the standard HTML5 primitives but the
               evaluation model now facilitates the use of custom compound
               elements defined in the environment, too.")
            (p
              "Additionally, the unification of HTML and ClojureScript syntax,
               semantics, and namespace in the HTML evaluator facilitates the
               use of macros in markup.  This makes it possible to write
               powerful looping and control structures for use in the page's
               HTML markup itself, bringing the power and expressiveness of
               Lisp to HTML.")

            (h2 "Components " (small "First-class custom DOM elements."))
            (p
              "While there is no shortage of templating systems to create
               blobs of DOM elements, there is no mechanism to create custom
               elements that are composable in any meaningful way. Consider
               the situation where a template engine binds a DOM template to
               some data and returns the filled-in DOM subtree. What happens
               when you append a child to, or set an attribute on that DOM
               element? The child gets appended to, or attribute set on the
               outermost element of the filled template, generally not what is
               required for the composition semantic.")
            (p
              "Hoplon provides facilities for creating real, first-class
               components. That is to say, Hoplon components are first-class
               citizens in the DOM world–they are, essentially, user-defined
               custom DOM elements. They have a literal representation in the
               page markup and they implement the semantics of HTML: setting
               attributes and appending children. When a child is appended to
               a Hoplon component or an attribute is set, either in HTML markup
               or programmatically, the component's implementation is used
               instead of the built-in DOM one. In this way components can be
               built by composing simpler components and those may be used as
               a basis for even more complex components, without running into
               the limitations of template composition.")

            (h2 "Spreadsheets " (small "Client state made simple."))
            (p
              "Remember how awesome spreadsheets are? You never think about
               state when you’re programming a spreadsheet. Instead, you focus
               on values and the formulas that define the relationships between
               them. When a new value is entered into a cell the rest of the
               spreadsheet updates itself as necessary to maintain the
               correctness of the formulas.")
            (p
              "After a spreadsheet is set up you can link its cells to charts
               and forms to create a user interface that manages its own state,
               automatically. User input flows from forms to input cells.
               Formulas then recompute their values as necessary. These values
               then flow to charts and graphs for the user to view.")
            (p
              "Hoplon applies this crazy, futuristic technology to frontend
              web development. Forgoing the clunky grid metaphor and names
              like " (em "A1") " and " (em "B27") ", Hoplon provides a cell
              reference type. These cells, like cells in a spreadsheet, are
              either updated directly (input cells), or automatically in
              accordance with a formula.")

            (h2 "Charts and Forms " (small "Stateless, automatic UI."))
            (p
              "The purpose of a program's user interface is to transmit input
              from the user to the underlying state model and to present output
              derived from the underlying state model to the user for viewing.")
            (p
              "In a web application the user interface is derived from the page
              markup. User input consists entirely of DOM events: "
              (em "click") ", " (em "change") ", etc. Output is presented to
              the user by manipulating the properties of DOM elements: adding
              or removing CSS classes, changing the content of text nodes,
              etc.")
            (p
              "Hoplon provides bindings that can be used to link DOM elements
              to the underlying state model in the same way that charts and
              forms are linked to cells in a spreadsheet. Once the structure
              of the DOM and the linkages between the DOM and cells are
              defined, the user interface manages itself."))
          (grid/col6
            (comment
              (h2 (small "Screencast"))
              (panel/default
                (panel/body
                  (iframe
                    :class "center-block"
                    :width (:width video-dims)
                    :height (:height video-dims)
                    :src video-url
                    :frameborder "0"
                    :allowfullscreen true))))
            (h2 (small "Examples"))
            (list/divgroup
              (list/divitem
                :on-click #(reset! example 1)
                (a
                  :do-toggle (cell= (not= example 1))
                  (panel/title "Typical Page"))
                (div
                  :do-toggle (cell= (= example 1))
                  (panel/title "Typical Page")
                  (hr)
                  (p
                    "The page can be coded in either ClojureScript or HTML
                     syntax. The compiler can parse either one. It's easy to add
                     a preprocessing step to parse HAML, etc. if desired.  HTML
                     is usually more verbose and noisy than ClojureScript, so
                     most examples in this document will be using the latter
                     syntax.")
                  (hr)
                  (p :class "text-muted" "Using ClojureScript syntax:")
                  (code/highlight :clj
                    ;;{{
                    (page "foo/bar.html"
                      (:require [my.lib :as lib]))

                    (defc clicks 0)

                    (html
                      (head
                        (title "Hello World")
                        (link :rel "stylesheet" :href "css/main.css"))
                      (body
                        (lib/heading-large "Hello, world!")
                        (p (text "You've clicked ~{clicks} times."))
                        (button :on-click #(swap! clicks inc) "Click me!")))
                    ;;}}
                    )
                  (p :class "text-muted" "Using HTML syntax:")
                  (code/highlight :xml
                    ;;{{
                    <script type="text/hoplon">
                      (page "foo/bar.html"
                        (:require [my.lib :as lib]))

                      (defc clicks 0)
                    </script>

                    <html>
                      <head>
                        <title>Hello World</title>
                        <link rel="stylesheet" href="css/main.css">
                      </head>
                      <body>
                        <lib.heading-large>Hello, world!</lib.heading-large>
                        <p><text>You've clicked ~{clicks} times.</text></p>
                        <button on-click="{{ #(swap! clicks inc) }}">
                          Click me!
                        </button>
                      </body>
                    </html>
                    ;;}}
                    )))
              (list/divitem
                :on-click #(reset! example 2)
                (a :class "topfix" :do-scroll-to (cell= (= example 2)))
                (a
                  :do-toggle (cell= (not= example 2))
                  (panel/title "BMI Calculator"))
                (div
                  :do-toggle (cell= (= example 2))
                  (panel/title "BMI Calculator")
                  (hr)
                  (p
                    "This is an example of a spreadsheet-like application.
                    The application's state is contained in "
                    (em "cells")
                    " which are wired up to the DOM. DOM events cause changes
                    to the underlying cells and formula cells in turn cause
                    changes to the DOM.")
                  (hr)
                  (p :class "text-muted" "The demo:")
                  (panel/default
                    (panel/body
                      (div
                        (form
                          (div :class "form-group"
                            (label (text "Height (~{bmi-height} cm)"))
                            (input
                              :on-change #(reset! bmi-height (val-id "bmi-ht"))
                              :id     "bmi-ht"
                              :class  "form-control"
                              :type   "range"
                              :min    0
                              :max    250
                              :value  @bmi-height))
                          (div :class "form-group"
                            (label (text "Weight (~(.toFixed (/ bmi-weight 10) 1) kg)"))
                            (input
                              :on-change #(reset! bmi-weight (val-id "bmi-wt"))
                              :id     "bmi-wt"
                              :class  "form-control"
                              :type   "range"
                              :min    0
                              :max    1500
                              :value  @bmi-weight))
                          (div :class "form-group"
                            (label
                              (text "BMI ~(.toFixed bmi 1) (~(first bmi-msg))"))
                            (input
                              :do-css (cell= {:background-color (second bmi-msg)})
                              :readonly   true
                              :class      "form-control"
                              :type       "range"
                              :min        0
                              :max        500
                              :do-value   (cell= (* bmi 10))))))))
                  (p :class "text-muted" "The cells:")
                  (code/highlight :clj
                    ;;{{
                    (def height (cell 180)) ; height in cm
                    (def weight (cell  80)) ; weight in kg

                    (def bmi ; formula: [bmi, description, color]
                      (cell=
                        (let [htm (/ height 100) ; height in meters
                              bmi (/ weight (* htm htm))]
                          (cond
                            (< bmi 18.5) [bmi "underweight"  "orange"]
                            (< bmi 25.0) [bmi "normal"      "inherit"]
                            (< bmi 30.0) [bmi "overweight"   "orange"]
                            :else        [bmi "obese"           "red"]))))
                    ;;}}
                    )
                  (p :class "text-muted" "The user interface:")
                  (code/highlight :clj
                    ;;{{
                    ;; Some details related to <input type="range">
                    ;; have been omitted for clarity.
                    (form
                      (label (text "Height (~{height} cm)"))
                      (input
                        :id "bmi-h"
                        :value @height
                        :on-change #(reset! height (val-id "bmi-h")))

                      (label (text "Weight (~{weight} kg)"))
                      (input
                        :id "bmi-w"
                        :value @weight
                        :on-change #(reset! weight (val-id "bmi-w")))

                      (label (text "BMI ~(first bmi) (~(second bmi))"))
                      (input
                        :do-value (cell= (first bmi))
                        :do-css (cell= {:background-color (nth bmi 2)})))
                    ;;}}
                    )))
              (list/divitem :on-click #(reset! example 3)
                (a :class "topfix" :do-scroll-to (cell= (= example 3)))
                (a
                  :do-toggle (cell= (not= example 3))
                  (panel/title "List Component"))
                (div
                  :do-toggle (cell= (= example 3))
                  (panel/title "List Component")
                  (hr)
                  (p
                    "This is an example of a custom element, or component. The "
                    (em "on-append!")
                    " function is used to provide the implementation for
                    appending children and setting attributes. This ensures
                    that children are, in this case, properly wrapped in list
                    item elements and appended to the inner unordered list
                    instead of to the outermost element. A special "
                    (em "title")
                    " attribute is also implemented here that sets the text of
                    the inner bold element.")
                  (p
                    "By implementing the HTML semantic this component becomes
                    a first-class DOM element. It can be used in page markup
                    and it can be passed around without any need for the
                    recipient to understand its internal structure. It can be
                    combined with other elements at any level to create more
                    complex components.")
                  (hr)
                  (p :class "text-muted" "The demo:")
                  (panel/default
                    (panel/body
                      (div
                        (p "See the list component below.")
                        (hr)
                        (my-list :title "Items:"
                          (span "item one")
                          (span "item two")
                          (span "item three")))))
                  (p :class "text-muted" "The component constructor:")
                  (code/highlight :clj
                    ;;{{
                    ;; Define custom element <my-list>.
                    (defelem my-list [attrs children]
                      (let [head (b)    ; Obtain references to inner
                            body (ul)   ; container elements.
                            this (div :class "my-list" (head) (body))]
                        ;; Implement appendChild/setAttribute.
                        (on-append! this
                          (fn [{:keys [title] :as attrs} children]
                            ;; The "title" attribute sets title text.
                            (when title (do! head :text title))
                            ;; Other attributes are set on outer div.
                            (add-attributes! this (dissoc attrs :title))
                            ;; Children are wrapped in <li>s and
                            ;; appended to inner <ul> element.
                            (apply body (map li children))))
                        ;; Initialize element.
                        (apply this attrs children)))
                    ;;}}
                    )
                  (p :class "text-muted" "The page markup:")
                  (code/highlight :clj
                    ;;{{
                    (div
                      (p "See the list component below.")
                      (hr)
                      (my-list :title "Items:"
                        (span "item one")
                        (span "item two")
                        (span "item three")))
                    ;;}}
                    ))))
            (panel/default
              (panel/heading
                (panel/title "Architecture"))
              (panel/body
                (tabs/tabs
                  (span "Fig 1")
                  (img :width "523px" :src "img/arch-full.png")
                  (span "Fig 2")
                  (img :width "523px" :src "img/arch-client.jpg")
                  )))
            ))
        (hr)
        (copyright-footer)))

    (content-getting-started
      (grid/row
        (grid/col6
          (h1
            "Getting Started" (br)
            (small "Build a Hoplon application from scratch."))
          (hr)
          (p
            "This article will demonstrate how to build Hoplon applications.
            A simple application will be developed incrementally. New features
            will be added at each step, showing how different parts of Hoplon
            are used. After running through the basics here, check out the "
            (a :href hoplon-demos-url :target "_blank" "hoplon demos")
            " repository to see some complete, self-contained example
            applications.")

          (br)
          (jump-to-toc :tocs (cell= [gs-tasks gs-tips]))
          (panel/default
            (panel/heading
              (panel/title "Table of Contents"))
            (panel/body
              (grid/row
                (grid/col6
                  (table-of-contents :size 10 :toc gs-tasks))
                (grid/col6
                  (table-of-contents :size 10 :toc gs-tips)))))

          (gs-info :title "System Requirements (Compiler)"
            (ul
              (li "Java 6+")
              (li "The " (a :href boot-url :target "_blank" "boot") " build tool.")))

          (gs-info :title "Browser Compatibility"
            (ul
              (li "Chrome")
              (li "Safari")
              (li "Firefox")
              (li "Internet Explorer 8+")))

          (gs-task :title "Task 1: Create empty project."
            (p
              "A typical project might have a directory structure that looks
              something like this:")
            (code/highlight :none
              ;;{{
              .
              ├── boot.edn
              ├── resources
              │   └── assets
              │       └── css
              │           └── main.css
              └── src
                  └── index.cljs.hl
              ;;}}
              )
            (p
              "To create a minimal Hoplon project just create a directory
              for the project, and in this new directory create a "
              (code "boot.edn")
              " file with the following contents:")
            (code/highlight :clj
              ;;{{
              {:dependencies  [[tailrecursion/boot.core   "1.1.1"]
                               [tailrecursion/boot.task   "1.0.0"]
                               [tailrecursion/hoplon      "4.0.7"]
                               [org.clojure/clojurescript "0.0-1934"]]
               :require-tasks #{[tailrecursion.boot.task    :refer :all]
                                [tailrecursion.hoplon.boot  :refer :all]}
               :public        "resources/public"
               :src-paths     #{"src"}}
              ;;}}
              ))

          (gs-task :title "Task 2: Create “Hello World” page."
            (p
              "Create a " (code "src/index.cljs.hl") " or "
              (code "src/index.html.hl") " file with the following contents:")
            (tabs/tabs :state task2syntax
              "index.cljs.hl"
              (code/highlight :clj
                ;;{{
                (page "index.html")

                (html
                  (head)
                  (body
                    (h1 "Hello, world!")))
                ;;}}
                )
              "index.html.hl"
              (code/highlight :xml
                ;;{{
                <script type="text/hoplon">
                  (page "index.html")
                </script>

                <html>
                  <head></head>
                  <body>
                    <h1>Hello, world!</h1>
                  </body>
                </html>
                ;;}}
                )
              )
            (p "Your project directory should now look like this:")
            (tabs/tabs :state task2syntax
              "index.cljs.hl"
              (code/highlight :none
                ;;{{
                .
                ├── boot.edn
                └── src
                    └── index.cljs.hl
                ;;}}
                )
              "index.html.hl"
              (code/highlight :none
                ;;{{
                .
                ├── boot.edn
                └── src
                    └── index.html.hl
                ;;}}
                )))

          (gs-info :title "Note"
            (p
              "To simplify things we will use " (code "index.cljs.hl") " and "
              (code "index.html.hl") " interchangeably in the examples below.
              It should be understood that HTML and CLJS syntaxes are
              equivalent–examples in CLJS syntax can be easily rewritten in
              HTML syntax and vice versa."))

          (gs-task :title "Task 3: Compile the project."
            (p "In another terminal do the following in the project directory:")
            (code/highlight :bash
              ;;{{
              $ boot watch hoplon
              ;;}}
              )
            (p
              "This starts the Hoplon compiler in “watcher” mode–source
              directories are monitored for changes and recompiled when
              necessary. When it's finished compiling the project directory
              should look something like this:")
            (code/highlight :none
              ;;{{
              .
              ├── boot.edn
              ├── resources
              │   └── public
              │       ├── main.js
              │       └── index.html
              └── src
                  └── index.cljs.hl
              ;;}}
              )
            (p
              "Load " (code "index.html") " in a browser and enjoy a friendly
              greeting."))

          (gs-task :title "Task 4: Add a counter."
            (p
              "Now we add a counter to the page that will keep track of how
              many times a button was clicked. To do this we add an input
              cell containing the click count to the environment, and link
              it to UI elements for input and output interactions with the
              user. Input will be click events on the button. Output will
              be the contents of a text node displaying the current count.")
            (p
              "Button click events are wired up to the input cell with the "
              (code ":on-click") " attribute. The " (code "text") " macro does
              some string interpolation and wires the input cell to the value
              of a text node such that it’s updated whenever the cell’s value
              changes.")
            (p
              "Modify the " (code "index.cljs.hl") " page such that it contains
              the following:")
            (counter-code)
            (p
              "If the compiler is still running in another terminal the
              application will be recompiled. Reload the page and click the
              button a few times. You should see something like this:")
            (counter-ex))

          (gs-task :title "Task 5: A simple calculator."
            (p
              "The next task is to build a simple calculator that can add,
              subtract, multiply, or divide two integers. Modify the "
              (code "index.cljs.hl") " file to contain the following:")
            (calc-code)
            (p "Compile and reload the page. You should see something like this:")
            (calc-ex)
            (p
              "Notice how the presentation (the page markup) is effectively
              decoupled from the application state (the cells). The
              four cells that contain the application's state could be
              defined in a different namespace, distributed in a jar
              file, deployed to a Maven repository, and used in a
              number of different pages. They form a well-defined API
              for the frontend developer to hook into when developing
              the page markup. This decoupling of presentation and
              state is a key component of the Hoplon model."))

          (gs-task :title "Task 6: Using the looping macro."
            (p
              "Most applications have sequential collections that need to be
              displayed to the user in some kind of template. Hoplon provides
              the " (code "loop-tpl") " macro that can be used in the page
              markup to iterate over the collection.")
            (loop-code1)
            (p "Compile and reload the page. You should see something like this:")
            (loop-ex1)
            (p
              "Note how " (code "loop-tpl") " iterates over the " (code "things")
              " cell, binding each item to " (code "x") ", in turn. However,
              notice that " (code "x") " needs to be dereferenced to be used in
              the template. This is because " (code "x") " is actually bound to
              a cell that always contains the nth item of the collection cell
              and not to the item itself.")
            (p
              "Here is a more interesting example that uses destructuring in
              the " (code ":bindings") " attribute:")
            (loop-code2)
            (p "Now when you reload the page you should see something like this:")
            (loop-ex2)
            (p
              "Notice the organization of the public API for the page’s
              underlying state machine: it consists of read-only formula cells
              and state transition functions that modify the underlying input
              cells as a side effect. This is known as the "
              (a :href cqrs-url :target "_blank" "CQRS pattern") " and forms the
              basic architecture of a Hoplon single-page app.")
            (p
              "Since " (code "loop-tpl") " is a macro that generates markup/code
              at compile time, it is essentially performing static allocation of
              DOM elements. This is a key concept in the Hoplon model. In Hoplon
              the DOM is strictly an I/O mechanism. As always, it turns out that
              static allocation of I/O resources provides great advantages by
              reducing the complexity of the application's state, eliminating
              the need to manage these resources explicitly. (DOM elements, like
              file descriptors, are not subject to garbage collection and must
              be explicitly removed from the DOM when no longer needed.)"))

          (gs-task :title "Task 7: Add static resources."
            (p
              "Now it’s time to add some static resources to the project. For
              example, adding the "
              (a :href bootstrap-url :target "_blank" "Twitter Bootstrap")
              " CSS stylesheets might help to get things looking fancy. Modify
              the " (code "boot.edn") " file such that it contains the following:")
            (code/highlight :clj
              ;;{{
              :src-static #{"resources/assets"}
              ;;}}
              )
            (p
              "Download Bootstrap and copy the CSS files into the directory. The
              project directory should be organized something like this now:")
            (code/highlight :none
              ;;{{
              .
              ├── boot.edn
              ├── resources
              │   ├── assets
              │   │   └── css
              │   │       ├── bootstrap-theme.css
              │   │       └── bootstrap.css
              │   └── public
              │       ├── index.html
              │       └── main.js
              └── src
                  └── index.cljs.hl
              ;;}}
              )
            (p
              "Restart the compiler and see how the " (code "css") " directory
              is copied over into the output directory automatically (and
              whenever anything in there changes)."))

          (gs-task :title "Task 8: Create a “tabs” abstraction."
            (p
              "This task demonstrates how to create a UI kit library that can be
              used in multiple pages. UI kits contain custom tags representing
              user interface abstractions. One commonly used abstraction is the
              “tabs” metaphor that everyone is familiar with.")
            (p
              "The new UI library should live in a separate namespace and
              contain custom DOM elements to use in the application pages.
              Create a new Hoplon source file, " (code "src/ui/tabs.cljs.hl")
              " with the following contents:")
            (tabs-code)
            (p
              "The " (code "defelem") " macro defines a function whose arguments
              are “normalized” for the HTML markup semantic. It takes a vector
              if bindings and a number of body expressions. The bindings vector
              should bind the attribute map as the first argument and a sequence
              of children as the second. This removes the need to explicitly
              parse the arguments when the function is called in the page markup
              with key/value arguments as attributes, etc.")
            (p
              "Notice how there is no need to " (code ":refer") " any of the
              Hoplon or Javelin vars in the namespace declaration. The Hoplon
              compiler does that automatically so you can just use "
              (code "defelem") ", " (code "div") ", " (code "span") ", etc. in
              the namespace without explicitly requiring them.")
            (p
              "Then modify " (code "index.cljs.hl") " such that it looks like
              this, using the newly created " (code "tabs") " custom tag:")
            (tabs/tabs
              "index.cljs.hl"
              (tabs-code2)
              "index.html.hl"
              (tabs-code2h))
            (p "Compile and reload the page. You should see something like this:")
            (tabs-ex))
          )

        (grid/col6
          (h2 :style "color:transparent;" "asdf")
          (gs-tip :title "Boot Configuration"
            (p
              "There are a few keys in the " (code "boot.edn") " configuration
              file that are important when building Hoplon applications.
              Understanding how these keys work will help you to organize your
              Hoplon project in a way that works best for your workflow and
              deployment situation.")
            (dl :class "dl-horizontal"
              (dt (tt ":public"))
              (dd
                (p
                  "The output directory for the Hoplon compiler. HTML and
                  static content ends up here. This is where you point your
                  webserver's document root."))
              (dt (tt ":src-paths"))
              (dd
                (p
                  "A set of paths in which the build process looks for source
                  files to compile. These directories can contain Hoplon,
                  Clojure, ClojureScript, JavaScript, or any other type of
                  source file. The various compilers generally dispatch on
                  filename extension, so the directory structure is pretty
                  much up to you. The file watcher monitors these directories
                  for changes and recompiles the project when necessary."))
              (dt (tt ":src-static"))
              (dd
                (p
                  "A set of paths containing the static content for the
                  project. This may include external JavaScript files, CSS
                  stylesheets, images, etc. The contents of these directories
                  are merged into the " (tt ":public") " directory after
                  compilation, and any subdirectory structure is overlayed.")))
            (p
              "Also, it's a good idea to set up your " (code ".gitignore")
              " file correctly, because the boot watch task uses your "
              (tt "git(1)") " configuration to determine which files will
              trigger recompiling and which will be ignored."))

          (gs-tip :title "Hoplon Source Files"
            (p
              "Hoplon compiles files having the " (code ".hl") " filename
              extension. These files may be Hoplon pages, which will be compiled
              to single-page apps, or ClojureScript namespaces.")
            (p "The first form in the file must be a page or namespace
               declaration. Page declarations specify the output HTML file
               path relative to the " (code ":public") " directory configured in
               the project " (code "boot.edn") " file. Namespace declarations are
               the same as in ClojureScript.")
            (p
              "In both cases, however, the Hoplon compiler refers vars and
               macros from the Hoplon and Javelin namespaces into the file
               namespace so that adding " (code ":refer") " clauses for things
               like " (code "div") ", " (code "span") ", etc. are not
               necessary. A special " (code ":refer-hoplon") " clause can be
               used to selectively exclude vars that are to be redefined in the
               file.")
            (p :class "text-muted" "Example page declaration:")
            (code/highlight :clj
              ;;{{
              (page "foo/bar.html"
                (:refer-hoplon :exclude [div span])
                (:refer-clojure :exclude [int])
                (:require
                 [clojure.set :as set]
                 [clojure.string :as string])
                (:require-macros
                 [foo.bar.baz :as baz :refer [quux]]))
              ;;}}
              )
            (p :class "text-muted" "Example namespace declaration:")
            (code/highlight :clj
              ;;{{
              (ns foo.bar
                (:refer-hoplon :exclude [div span])
                (:refer-clojure :exclude [int])
                (:require
                 [clojure.set :as set]
                 [clojure.string :as string])
                (:require-macros
                 [foo.bar.baz :as baz :refer [quux]]))
              ;;}}
              ))

          (gs-tip :title "Anatomy of a Hoplon Page"
            (p
              "Hoplon page source files have three parts: the page
              declaration, optional definitions and top-level forms, and
              the page markup.")
            (p :class "text-muted" "The page declaration:")
            (code/highlight :clj
              ;;{{
              (page "index.html"
                (:require [clojure.string :as string]))
              ;;}}
              )
            (p :class "text-muted" "Optional top-level forms and definitions:")
            (code/highlight :clj
              ;;{{
              (def add1 [x] (+ 1 x))
              ;;}}
              )
            (p :class "text-muted" "The page markup:")
            (code/highlight :clj
              ;;{{
              (html
                (head)
                (body
                  (h1 "hello, number " (str (add1 41)))))
              ;;}}
              ))
          (gs-tip :title "Sexp Markup Syntax"
            (p
              "Hoplon's HTML evaluator provides a sexp-based HTML syntax and
              semantic. Elements in sexp markup are parenthesized lists, the
              same as Lisp expressions. The form in function position is the
              element’s HTML tag. Hoplon adds semantics for setting attributes
              and appending children. Consider a typical snippet of HTML markup:")
            (code/highlight :xml
              ;;{{
              <div id="greet" class="active">
                <h1>Hello, world!</h1>
                <p>I'm new here.</p>
              </div>
              ;;}}
              )
            (p "This snippet can be expressed in sexp markup like this:")
            (code/highlight :clj
              ;;{{
              (div :id "greet" :class "active"
                (h1 "Hello, world!")
                (p "I'm new here."))
              ;;}}
              )
            (p
              "Notice how attributes can be set by passing them in first as
              alternating keyword/string pairs. The rest of the arguments are
              appended to the element (the div in this case) as children.")
            (p
              "Sometimes it’s more convenient to specify the attributes as a
               map, like this:")
            (code/highlight :clj
              ;;{{
              (div {:id "greet" :class "active"}
                (h1 "Hello, world!")
                (p "I'm new here."))
              ;;}}
              )
            (p
              "Additionally, Hoplon provides semantics for anonymous tags in
              sexp markup. There is, of course, no such thing in HTML markup.
              The same snippet can be expressed using an anonymous tag:")
            (code/highlight :clj
              ;;{{
              ((div :id "greet" :class "active")
               (h1 "Hello, world!")
               (p "I'm new here."))
              ;;}}
              )
            (p
              "It’s important to understand that the " (code "div") ", "
              (code "h1") ", and " (code "p") " forms are ClojureScript
              functions that return DOM elements. DOM elements implement the "
              (code "IFn") " protocol to achieve the HTML semantic. This means
              that they can be used to form abstractions:")
            (code/highlight :clj
              ;;{{
              (defn active [& kids]
                (apply (div :class "active") kids))
              ;;}}
              )
            (p "And then, in the page markup or in a function:")
            (code/highlight :clj
              ;;{{
              (active :id "greet"
                (h1 "Hello, world!")
                (p "I'm new here."))
              ;;}}
              )
            (p "Or in HTML markup in the page, even:")
            (code/highlight :xml
              ;;{{
              <div class="active" id="greet">
                <h1>Hello, world!</h1>
                <p>I'm new here.</p>
              </div>
              ;;}}
              )
            (p
              "The result is equivalent to the previous snippets, but more
              general. These “custom tags” can be used in the page markup like
              any of the built-in tags.")
            (p
              "Finally, sequences or vectors can be used to splice children
              into the parent similar to how the " (code "unquote-splicing")
              " form works in Clojure. For instance this,")
            (code/highlight :clj
              ;;{{
              (ul :class "my-list"
                (map #(li :class "my-item" %) ["item1" "item2"]))
              ;;}}
              )
            (p "is equivalent to this:")
            (code/highlight :clj
              ;;{{
              (apply (ul :class "my-list")
                (map #(li :class "my-item" %) ["item1" "item2"]))
              ;;}}
              ))

          (gs-tip :title "Wiring Up The DOM"
            (p
              "DOM interactions can be can be divided into two categories:
              input and output. Input is how the user initiates changes to the
              state of the application, consisting of DOM events like "
              (em "click") ", " (em "change") ", etc. Output is how the state of
              the application is conveyed to the user, consisting of setting
              element attributes, properties, and the contents of text nodes.")
            (p
              "In a Hoplon page input is accepted via the special "
              (code ":on-" (em "event")) " attributes set on DOM elements. All
              jQuery events are supported, including custom events. The value
              of this attribute is the event handler. For example:")
            (code/highlight :clj
              ;;{{
              (button
                :on-click (fn [event] (handle! event))
                "click this button")
              ;;}}
              )
            (p
              "Output is displayed via the special " (code ":do-" (em "action"))
              " attributes set on DOM elements. The value of these attributes is
              a formula cell whose value forms the argument to the action. For
              example:")
            (code/highlight :clj
              ;;{{
              (div :do-class (cell= {:active (= 20 page)})
                (h2 "Page 20")
                (p "This is the content for page 20."))
              ;;}}
              )
            (p
              "The " (code ":do-class") " example above adds or removes the "
              (em "“active”") " class, depending on whether the " (code "page")
              " cell’s value is equal to 20 or not, respectively. This
              relationship is maintained automatically, reactively keeping the
              element’s class in sync with the formula.")
            (p
              "The " (code "text") " macro creates DOM text nodes whose content
              automatically updates itself, interpolating cell values and/or
              formulas in the argument string. For example:")
            (code/highlight :clj
              ;;{{
              (p (text "the value of x is ~{x}"))
              ;;}}
              )
            (p
              "This creates a paragraph whose text content is linked to the
              interpolated string.")
            (p
              "Output and input wiring can also be done programmatically using
              the " (code "do!") " and " (code "on!") " multimethods. For
              instance, to set the " (em "“active”") " class on element "
              (code "elem") ", one would do:")
            (code/highlight :clj
              ;;{{
              (do! elem :class {:active true})
              ;;}}
              )
            (p
              "And to add a handler for the " (em "click") " event one would do:")
            (code/highlight :clj
              ;;{{
              (on! elem :click #(handle! %))
              ;;}}
              )
            (p
              "It's important to note the these are not reactive. They're just
              regular functions operating on regular data, not cells. To achieve
              the reactive behavior of the " (code ":do-class") " example above
              the expression can be used as the formula of an anonymous cell
              (anonymous because output is only for side-effects–mutating the
              DOM in this case):")
            (code/highlight :clj
              ;;{{
              (cell= (do! elem :class {:active (= 20 page)}))
              ;;}}
              )
            (p
              "Event handlers are normally set just once, so formula cells don’t
              usually make sense in combination with the " (code "on!")
              " method. This illustrates the I/O model in Hoplon: output
              reactively updates the DOM in relation to the underlying state via
              formula cells, while input updates the underlying state via events
              emitted by the DOM.")
            )
          ))

      (hr)
      (copyright-footer))

    (content-community
      (grid/row
        (grid/col3)
        (grid/col6
          (h1 "Community")
          (hr)
          (dl :class "dl-horizontal"
            (dt "Source")
            (dd (a :href hoplon-url :target "_blank" hoplon-url))
            (dt "Issues")
            (dd (a :href hoplon-issues-url :target "_blank" hoplon-issues-url))
            (dt "Mailing List")
            (dd (a :href hoplon-group-url :target "_blank" hoplon-group-url))
            (dt "Freenode IRC")
            (dd (tt "#hoplon")))
          (hr)
          (h3 "Special Thanks To")
          (dl :class "dl-horizontal"
            (dt "Ray Willig")
            (dd (a :href "https://github.com/rwillig" :target "_blank" "https://github.com/rwillig"))
            (dt "Alexander Solovyov")
            (dd (a :href "https://github.com/piranha" :target "_blank" "https://github.com/piranha"))
            (dt "Kevin Lynagh")
            (dd (a :href "http://github.com/lynaghk" :target "_blank" "http://github.com/lynaghk"))
            (dt "The Flapjax Team")
            (dd (a :href "http://www.flapjax-lang.org/" :target "_blank" "http://www.flapjax-lang.org/")))
          (hr)
          (copyright-footer))
        (grid/col3)))))
